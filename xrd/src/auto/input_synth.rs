// Generated by gir (https://github.com/gtk-rs/gir @ e0d8d8d645b1)
// from ../gir-files (@ 54ae87ae2ece+)
// from ../xrd-gir-files (@ 8cffc8b155f9)
// DO NOT EDIT

use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "XrdInputSynth")]
    pub struct InputSynth(Object<ffi::XrdInputSynth, ffi::XrdInputSynthClass>);

    match fn {
        type_ => || ffi::xrd_input_synth_get_type(),
    }
}

impl InputSynth {
    #[doc(alias = "xrd_input_synth_new")]
    pub fn new() -> InputSynth {
        unsafe {
            from_glib_full(ffi::xrd_input_synth_new())
        }
    }

    //#[doc(alias = "xrd_input_synth_create_action_set")]
    //pub fn create_action_set(&self, context: &impl IsA<gxr::Context>) -> /*Ignored*/Option<gxr::ActionSet> {
    //    unsafe { TODO: call ffi:xrd_input_synth_create_action_set() }
    //}

    #[doc(alias = "xrd_input_synth_get_primary_controller")]
    #[doc(alias = "get_primary_controller")]
    pub fn primary_controller(&self) -> Option<gxr::Controller> {
        unsafe {
            from_glib_none(ffi::xrd_input_synth_get_primary_controller(self.to_glib_none().0))
        }
    }

    #[doc(alias = "xrd_input_synth_make_primary")]
    pub fn make_primary(&self, controller: &gxr::Controller) {
        unsafe {
            ffi::xrd_input_synth_make_primary(self.to_glib_none().0, controller.to_glib_none().0);
        }
    }

    //#[doc(alias = "xrd_input_synth_move_cursor")]
    //pub fn move_cursor(&self, window: &impl IsA<Window>, controller_pose: /*Ignored*/&mut graphene::Matrix, intersection: &mut graphene::Point3D) {
    //    unsafe { TODO: call ffi:xrd_input_synth_move_cursor() }
    //}

    #[doc(alias = "xrd_input_synth_reset_press_state")]
    pub fn reset_press_state(&self) {
        unsafe {
            ffi::xrd_input_synth_reset_press_state(self.to_glib_none().0);
        }
    }

    #[doc(alias = "xrd_input_synth_reset_scroll")]
    pub fn reset_scroll(&self) {
        unsafe {
            ffi::xrd_input_synth_reset_scroll(self.to_glib_none().0);
        }
    }

    #[doc(alias = "click-event")]
    pub fn connect_click_event<F: Fn(&Self, &gdk::Event) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn click_event_trampoline<F: Fn(&InputSynth, &gdk::Event) + Send + Sync + 'static>(this: *mut ffi::XrdInputSynth, object: *mut gdk::ffi::GdkEvent, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_none(object))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"click-event\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(click_event_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "move-cursor-event")]
    pub fn connect_move_cursor_event<F: Fn(&Self, &gdk::Event) + Send + Sync + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn move_cursor_event_trampoline<F: Fn(&InputSynth, &gdk::Event) + Send + Sync + 'static>(this: *mut ffi::XrdInputSynth, object: *mut gdk::ffi::GdkEvent, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_none(object))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"move-cursor-event\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(move_cursor_event_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl Default for InputSynth {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

unsafe impl Send for InputSynth {}
unsafe impl Sync for InputSynth {}

impl fmt::Display for InputSynth {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("InputSynth")
    }
}
