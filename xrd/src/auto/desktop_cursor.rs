// Generated by gir (https://github.com/gtk-rs/gir @ e0d8d8d645b1)
// from ../gir-files (@ 54ae87ae2ece+)
// from ../xrd-gir-files (@ 8cffc8b155f9)
// DO NOT EDIT

use crate::Window;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "XrdDesktopCursor")]
    pub struct DesktopCursor(Interface<ffi::XrdDesktopCursor, ffi::XrdDesktopCursorInterface>);

    match fn {
        type_ => || ffi::xrd_desktop_cursor_get_type(),
    }
}

impl DesktopCursor {
        pub const NONE: Option<&'static DesktopCursor> = None;
    
}

unsafe impl Send for DesktopCursor {}
unsafe impl Sync for DesktopCursor {}

pub trait DesktopCursorExt: 'static {
    //#[doc(alias = "xrd_desktop_cursor_get_data")]
    //#[doc(alias = "get_data")]
    //fn data(&self) -> /*Ignored*/Option<DesktopCursorData>;

    //#[doc(alias = "xrd_desktop_cursor_get_texture")]
    //#[doc(alias = "get_texture")]
    //fn texture(&self) -> /*Ignored*/Option<gulkan::Texture>;

    //#[doc(alias = "xrd_desktop_cursor_get_transformation")]
    //#[doc(alias = "get_transformation")]
    //fn transformation(&self, matrix: /*Ignored*/&mut graphene::Matrix);

    #[doc(alias = "xrd_desktop_cursor_hide")]
    fn hide(&self);

    #[doc(alias = "xrd_desktop_cursor_init_settings")]
    fn init_settings(&self);

    //#[doc(alias = "xrd_desktop_cursor_set_and_submit_texture")]
    //fn set_and_submit_texture(&self, texture: /*Ignored*/&gulkan::Texture);

    #[doc(alias = "xrd_desktop_cursor_set_hotspot")]
    fn set_hotspot(&self, hotspot_x: i32, hotspot_y: i32);

    //#[doc(alias = "xrd_desktop_cursor_set_transformation")]
    //fn set_transformation(&self, matrix: /*Ignored*/&mut graphene::Matrix);

    #[doc(alias = "xrd_desktop_cursor_set_width_meters")]
    fn set_width_meters(&self, meters: f32);

    #[doc(alias = "xrd_desktop_cursor_show")]
    fn show(&self);

    #[doc(alias = "xrd_desktop_cursor_submit_texture")]
    fn submit_texture(&self);

    #[doc(alias = "xrd_desktop_cursor_update")]
    fn update(&self, context: &impl IsA<gxr::Context>, window: &impl IsA<Window>, intersection: &mut graphene::Point3D);
}

impl<O: IsA<DesktopCursor>> DesktopCursorExt for O {
    //fn data(&self) -> /*Ignored*/Option<DesktopCursorData> {
    //    unsafe { TODO: call ffi:xrd_desktop_cursor_get_data() }
    //}

    //fn texture(&self) -> /*Ignored*/Option<gulkan::Texture> {
    //    unsafe { TODO: call ffi:xrd_desktop_cursor_get_texture() }
    //}

    //fn transformation(&self, matrix: /*Ignored*/&mut graphene::Matrix) {
    //    unsafe { TODO: call ffi:xrd_desktop_cursor_get_transformation() }
    //}

    fn hide(&self) {
        unsafe {
            ffi::xrd_desktop_cursor_hide(self.as_ref().to_glib_none().0);
        }
    }

    fn init_settings(&self) {
        unsafe {
            ffi::xrd_desktop_cursor_init_settings(self.as_ref().to_glib_none().0);
        }
    }

    //fn set_and_submit_texture(&self, texture: /*Ignored*/&gulkan::Texture) {
    //    unsafe { TODO: call ffi:xrd_desktop_cursor_set_and_submit_texture() }
    //}

    fn set_hotspot(&self, hotspot_x: i32, hotspot_y: i32) {
        unsafe {
            ffi::xrd_desktop_cursor_set_hotspot(self.as_ref().to_glib_none().0, hotspot_x, hotspot_y);
        }
    }

    //fn set_transformation(&self, matrix: /*Ignored*/&mut graphene::Matrix) {
    //    unsafe { TODO: call ffi:xrd_desktop_cursor_set_transformation() }
    //}

    fn set_width_meters(&self, meters: f32) {
        unsafe {
            ffi::xrd_desktop_cursor_set_width_meters(self.as_ref().to_glib_none().0, meters);
        }
    }

    fn show(&self) {
        unsafe {
            ffi::xrd_desktop_cursor_show(self.as_ref().to_glib_none().0);
        }
    }

    fn submit_texture(&self) {
        unsafe {
            ffi::xrd_desktop_cursor_submit_texture(self.as_ref().to_glib_none().0);
        }
    }

    fn update(&self, context: &impl IsA<gxr::Context>, window: &impl IsA<Window>, intersection: &mut graphene::Point3D) {
        unsafe {
            ffi::xrd_desktop_cursor_update(self.as_ref().to_glib_none().0, context.as_ref().to_glib_none().0, window.as_ref().to_glib_none().0, intersection.to_glib_none_mut().0);
        }
    }
}

impl fmt::Display for DesktopCursor {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("DesktopCursor")
    }
}
